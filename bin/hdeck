#!/usr/bin/env ruby

require 'thor'
require 'yaml/store'
require_relative '../lib/hdeck'

class CLI < Thor
  package_name "hdeck"

  desc "new", "create a new harrow deck"
  option :alignment, default: 'CN'
  def new
    store = YAML::Store.new 'hdeck.store'

    store.transaction do
      store[:player] = HDeck::CardCaster.new(alignment: options[:alignment])
    end
  end

  desc "draw", "draw from harrow deck (with replacement)"
  option :n, default: 1, desc: 'draw amount', type: :numeric
  def draw
    player = get_player
    player.draw_card(amount: options[:n])
  end

  desc "throw", "throw card from harrow deck (no replacement)"
  option :n, default: 1, desc: 'throw amount', type: :numeric
  def throw
    player = get_player
    player.throw_card(amount: options[:n])
    save(player)
  end

  desc "length", "number of cards left in the deck"
  def length
    player = get_player
    puts player.deck.length
  end

  desc "shuffle", "shuffle the active harrow deck"
  def shuffle
    player = get_player
    player.deck.shuffle
    puts "Shuffled #{player.deck.length} cards."
    save(player)
  end

  no_commands do
    # TODO: Clean up store instantiation pattern
    def get_player
      store = YAML::Store.new 'hdeck.store'
      store.transaction { store[:player] }
    end

    def save(player)
      store = YAML::Store.new 'hdeck.store'
      store.transaction do
        store[:player] = player
      end
    end
  end
end

CLI.start(ARGV)
